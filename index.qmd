---
title: "Visualizing Starch and Elliott"
format: dashboard
---


```{r}
library(tidyverse)
library(knitr)
library(ggplot2)
library(dplyr)
library(viridis)
library(ggcorrplot)
library(reshape2)  # For melting the correlation matrix
library(boot)
library(psych)
library(car)  # For the qqPlot function
library(kableExtra)
```


```{r}
# Load the dataset
df_se <- read.csv("data/se.csv")
df_se$paper <- as.factor(df_se$paper)
```

##

```{r}
# Summarize the data
summary_stats <- df_se %>%
  dplyr::summarise(
    median = median(score),  # creates new variable called `median` from the output of `median(score)`
    # mean = mean(score),      # creates new variable called `mean` from the output of `mean(score)`
    # IQR = IQR(score),
    var = var(score),
    sd = sd(score)
  )

# Print the summary statistics as a nicely formatted table
kable(summary_stats, caption = "Summary Statistics")
```

```{r}
ggplot(df_se, aes(x = score)) +
  geom_histogram(binwidth = 2, fill = "blue", color = "black", alpha = 0.7) +
  geom_vline(aes(xintercept = median(score, na.rm = TRUE)), color = "red", linetype = "dashed", size = 1) +
  geom_vline(aes(xintercept = mean(score, na.rm = TRUE) + sd(score, na.rm = TRUE)), color = "orange", linetype = "dotted", size = 1) +
  geom_vline(aes(xintercept = mean(score, na.rm = TRUE) - sd(score, na.rm = TRUE)), color = "orange", linetype = "dotted", size = 1) +
  annotate("text", x = median(df_se$score, na.rm = TRUE), y = Inf, label = paste0("Median = ", round(median(df_se$score, na.rm = TRUE), 2)), vjust = -0.5, color = "red") +
  annotate("text", x = mean(df_se$score, na.rm = TRUE) + sd(df_se$score, na.rm = TRUE), y = Inf, label = paste0("+1 SD = ", round(mean(df_se$score, na.rm = TRUE) + sd(df_se$score, na.rm = TRUE), 2)), vjust = -1.5, color = "orange") +
  annotate("text", x = mean(df_se$score, na.rm = TRUE) - sd(df_se$score, na.rm = TRUE), y = Inf, label = paste0("-1 SD = ", round(mean(df_se$score, na.rm = TRUE) - sd(df_se$score, na.rm = TRUE), 2)), vjust = -1.5, color = "orange") +
  theme_grey() +
  labs(title = "Histogram of Scores", x = "Score", y = "Count")
```

##

```{r}
# Histogram of scores
ggplot(df_se, aes(x = score)) +
  geom_histogram(binwidth = 2, fill = "blue", color = "black", alpha = 0.7) +
  facet_wrap(~fig, ncol = 2) +  # Facet by 'fig', 2 columns) 
  theme_grey() +
  labs(title = "Distribution of Scores by Figure", x = "Score", y = "Count")
```







```{r}
# Histogram of scores
ggplot(df_se, aes(x = score)) +
  geom_histogram(binwidth = 2, fill = "blue", color = "black", alpha = 0.7) +
  facet_wrap(~grader) +  # Facet by 'grader'
  theme_grey() +
  labs(title = "Distribution of Scores by Grader", x = "Score", y = "Count")
```

## Row 


```{r}
# Violin + Jitter plot with median indicators
ggplot(df_se, aes(x = grader, y = score, shape = as.factor(paper), fill = grader)) +
  geom_violin(alpha = 0.8) +  # Violin plot with color fill
  geom_jitter(width = 0.3, alpha = 0.6, size = 2) +  # Adjusted jitter properties
  stat_summary(fun = median, geom = "point", color = "red", size = 4, shape = 23, fill = "red") +  # Median indicator in red
  scale_fill_viridis_d() +  # Apply discrete viridis color scale
  theme_grey() +
  labs(title = "Violin Plot of Scores by Grader with Jitter and Median",
       x = "Grader", y = "Score", shape = "Paper", fill = "Grader") +
  theme(legend.position = "right")
```



```{r}

# Select relevant columns
df_selected <- df_se[, c("pass_pct", "score", "grader", "paper")]

# Convert categorical variables ('grader' and 'paper') to numeric
df_selected$grader <- as.numeric(as.factor(df_selected$grader))
df_selected$paper <- as.numeric(as.factor(df_selected$paper))

# Handle missing values
df_selected <- na.omit(df_selected)  

# Compute correlation matrix
corr_matrix <- cor(df_selected, use = "pairwise.complete.obs")

# Convert correlation matrix to a long format for ggplot
corr_melted <- melt(corr_matrix)

# Create the heatmap
ggplot(corr_melted, aes(Var1, Var2, fill = value)) +
  geom_tile(color = "white") +  # Add white grid lines between cells
  scale_fill_viridis(option = "plasma", limits = c(-1, 1)) +  # High contrast colors
  geom_text(aes(label = sprintf("%.2f", value)), color = "black", size = 4) +  # Add correlation values
  theme_grey() +
  labs(title = "Correlation Heatmap", x = "", y = "") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

