---
title: "Visualizing Starch and Elliott (1912)"
format: dashboard
scrolling: true
---


```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(viridis)
library(ggcorrplot)
library(reshape2)  # For melting the correlation matrix
```


```{r}
# Load the dataset
df_se <- read.csv("data/se.csv")
df_se$paper <- as.factor(df_se$paper)
```

## Row 

```{r}
# Histogram of scores
ggplot(df_se, aes(x = score)) +
  geom_histogram(binwidth = 2, fill = "blue", color = "black", alpha = 0.7) +
  facet_wrap(~fig) +  # Facet by 'fig'
  theme_minimal() +
  labs(title = "Distribution of Scores", x = "Score", y = "Count")
```


## Row 

```{r}
# Scatter plot of pass_pct vs score
ggplot(df_se, aes(x = pass.pct, y = score)) +
  geom_point(alpha = 0.6, color = "blue") +  # Scatter points
  geom_smooth(method = "lm", color = "red", se = TRUE) +  # Regression line with confidence interval
  theme_minimal() +
  labs(title = "Relationship Between Pass Percentage and Score",
       x = "Pass Percentage", y = "Score")
```

```{r}
# Compute correlation between pass_pct and score
cor(df_se$pass.pct, df_se$score, use = "complete.obs")  
```

```{r}
ggplot(df_se, aes(x = pass.pct, y = score)) +
  geom_point(alpha = 0.6, aes(color = paper)) +  # Color by paper
  geom_smooth(method = "lm", color = "red", se = TRUE) +
  facet_wrap(~paper) +  # Facet by paper
  theme_minimal() +
  labs(title = "Pass Percentage vs Score by Paper",
       x = "Pass Percentage", y = "Score", color = "Paper")
```

##


```{r}
# Violin + Jitter plot with median indicators
ggplot(df_se, aes(x = grader, y = score, shape = as.factor(paper), fill = grader)) +
  geom_violin(alpha = 0.8) +  # Violin plot with color fill
  geom_jitter(width = 0.3, alpha = 0.6, size = 2) +  # Adjusted jitter properties
  stat_summary(fun = median, geom = "point", color = "red", size = 4, shape = 23, fill = "red") +  # Median indicator in red
  scale_fill_viridis_d() +  # Apply discrete viridis color scale
  theme_minimal() +
  labs(title = "Violin Plot of Scores by Grader with Jitter and Median",
       x = "Grader", y = "Score", shape = "Paper", fill = "Grader") +
  theme(legend.position = "right")
```

##

```{r}
# Select only relevant columns with correct column name
df_selected <- df_se[, c("pass.pct", "score", "grader", "paper")]

# Convert categorical variables ('grader' and 'paper') to numeric
df_selected$grader <- as.numeric(as.factor(df_selected$grader))
df_selected$paper <- as.numeric(as.factor(df_selected$paper))

# Handle missing values
df_selected <- na.omit(df_selected)  # Remove rows with missing data

# Compute correlation matrix
corr_matrix <- cor(df_selected, use = "pairwise.complete.obs")  

# Function to compute p-values
cor_pvalues <- function(x) {
  n <- ncol(x)
  p_mat <- matrix(NA, n, n)
  colnames(p_mat) <- rownames(p_mat) <- colnames(x)
  
  for (i in 1:n) {
    for (j in 1:n) {
      test_result <- cor.test(x[, i], x[, j])
      p_mat[i, j] <- test_result$p.value
    }
  }
  return(p_mat)
}

# Compute p-value matrix
p_matrix <- cor_pvalues(df_selected)
```

```{r}
# Visualize the correlation matrix with p-values below circles
ggcorrplot(corr_matrix, 
           method = "circle",  
           type = "lower",  
           p.mat = p_matrix,  
           insig = "blank",  
           lab = TRUE,  
           lab_size = 3,  
           colors = viridis(3, option = "inferno"),  
           title = "Correlation Matrix (Pass Pct, Score, Grader, Paper) with P-Values",
           ggtheme = theme_minimal())
```

```{r}

# Select relevant columns
df_selected <- df_se[, c("pass.pct", "score", "grader", "paper")]

# Convert categorical variables ('grader' and 'paper') to numeric
df_selected$grader <- as.numeric(as.factor(df_selected$grader))
df_selected$paper <- as.numeric(as.factor(df_selected$paper))

# Handle missing values
df_selected <- na.omit(df_selected)  

# Compute correlation matrix
corr_matrix <- cor(df_selected, use = "pairwise.complete.obs")

# Convert correlation matrix to a long format for ggplot
corr_melted <- melt(corr_matrix)

# Create the heatmap
ggplot(corr_melted, aes(Var1, Var2, fill = value)) +
  geom_tile(color = "white") +  # Add white grid lines between cells
  scale_fill_viridis(option = "plasma", limits = c(-1, 1)) +  # High contrast colors
  geom_text(aes(label = sprintf("%.2f", value)), color = "black", size = 4) +  # Add correlation values
  theme_minimal() +
  labs(title = "Correlation Heatmap", x = "", y = "") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
